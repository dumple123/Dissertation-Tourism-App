generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String              @id @default(uuid())
  email       String              @unique
  username    String              @unique
  password    String
  createdAt   DateTime            @default(now())
  poiProgress User_POI_Progress[]
}

model Map {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  buildings Building[]
  pois      POI[]
}

model Building {
  id              String           @id @default(uuid())
  name            String
  mapId           String
  bottomFloor     Int              @default(0)
  numFloors       Int
  geojson         Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  map             Map              @relation(fields: [mapId], references: [id])
  interiorMarkers InteriorMarker[]
  rooms           Room[]
}

model Room {
  id         String   @id @default(uuid())
  name       String
  floor      Int
  buildingId String
  geojson    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  accessible Boolean  @default(false)
  isArea     Boolean  @default(false)
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model InteriorMarker {
  id          String   @id @default(uuid())
  buildingId  String
  floor       Int
  type        String
  coordinates Json
  label       String?
  accessible  Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model POI {
  id           String              @id @default(uuid())
  mapId        String
  name         String
  description  String?
  geojson      Json
  hidden       Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  map          Map                 @relation(fields: [mapId], references: [id], onDelete: Cascade)
  userProgress User_POI_Progress[]
}

model User_POI_Progress {
  id        String   @id @default(uuid())
  userId    String
  poiId     String
  visitedAt DateTime @default(now())
  poi       POI      @relation(fields: [poiId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, poiId])
}
