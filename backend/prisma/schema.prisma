// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  username String   @unique
  password String
  createdAt DateTime @default(now())
}

model Map {
  id        String     @id @default(uuid())
  name      String
  buildings Building[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Building {
  id           String   @id @default(uuid())
  name         String
  map          Map      @relation(fields: [mapId], references: [id])
  mapId        String
  bottomFloor  Int @default(0)      // e.g., -2 if B2 is the lowest
  numFloors    Int      // e.g., 5 if it goes from B2 (-2) to 2nd floor (2)
  geojson      Json
  rooms        Room[]   // One-to-many relationship
  interiorMarkers InteriorMarker[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Room {
  id          String   @id @default(uuid())
  name        String
  floor       Int
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId  String
  geojson     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InteriorMarker {
  id          String   @id @default(uuid())
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId  String
  floor       Int
  type        String
  coordinates Json
  label       String?
  accessible  Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}